{{/* vim: set filetype=mustache: */}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name | quote }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    app.kubernetes.io/name: {{ .Values.controller.apiGroup | quote }}
    app.kubernetes.io/instance: {{ printf "%s-%s" .Values.controller.name .Release.Namespace | quote }}
    app.kubernetes.io/component: {{ .Chart.Name | quote }}
    app.kubernetes.io/part-of: {{ .Release.Namespace | quote }}
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    helm.sh/chart: {{ .Chart.Name | quote }}
spec:
  replicas: {{ .Release.Replicas | quote }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
  minReadySeconds: 5
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Values.controller.apiGroup | quote }}
      app.kubernetes.io/instance: {{ printf "%s-%s" .Values.controller.name .Release.Namespace | quote }}
      app.kubernetes.io/component: {{ .Chart.Name | quote }}
      app.kubernetes.io/part-of: {{ .Release.Namespace | quote }}
      app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
      helm.sh/chart: {{ .Chart.Name | quote }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Values.controller.apiGroup | quote }}
        app.kubernetes.io/instance: {{ printf "%s-%s" .Values.controller.name .Release.Namespace | quote }}
        app.kubernetes.io/component: {{ .Chart.Name | quote }}
        app.kubernetes.io/part-of: {{ .Release.Namespace | quote }}
        app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
        helm.sh/chart: {{ .Chart.Name | quote }}
      annotations:
        lastUpdate: {{ now | quote }}
    spec:
      initContainers:
        # Reference: https://github.com/kubernetes/kubernetes/issues/81089#issuecomment-716804648
        - name: permissions
          image: busybox
          command: [ "/bin/sh", "-c" ]
          args:
            - cp -RL /etc/certs-secret/* /etc/certs-data;
              chown -R 65532:65532 /etc/certs-data/;
              find /etc/certs-data -type d -exec chmod 700 {} \;
              find /etc/certs-data -type f -exec chmod 600 {} \;
              ls -laL /etc/certs-data/;
              ls -laL /etc/certs-secret/;
          volumeMounts:
            - name: certs-secret
              mountPath: /etc/certs-secret
            - name: certs-data
              mountPath: /etc/certs-data
          securityContext:
            runAsUser: 0
      containers:
        - name: {{ .Chart.Name | quote }}
          image: {{ printf "%s/%s:%s" .Values.container.registry .Values.container.repository .Values.container.tag | quote }}
          imagePullPolicy: Always
          ports:
            - containerPort: {{ .Values.container.port }}
              name: http
          env:
            - name: CERT_DIR
              value: {{ printf "/etc/%s/certs" .Values.controller.apiGroup | quote }}
            - name: PORT
              value: {{ .Values.container.port | quote }}
            - name: DATABASE_URI
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s-database" .Release.Name | quote }}
                  key: DATABASE_URI
            - name: BROKER_URI
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s-broker" .Release.Name | quote }}
                  key: BROKER_URI
          volumeMounts:
            - name: certs-data
              mountPath: {{ printf "/etc/%s/certs" .Values.controller.apiGroup | quote }}
          livenessProbe:
            httpGet:
              path: /
              port: http
            failureThreshold: 1
            periodSeconds: 5
            initialDelaySeconds: 1
          startupProbe:
            httpGet:
              path: /
              port: http
            failureThreshold: 60
            periodSeconds: 1
            initialDelaySeconds: 1
          securityContext:
            runAsNonRoot: true
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
      volumes:
        - name: certs-secret
          secret:
            secretName: {{ printf "%s-certs" .Release.Name | quote }}
            defaultMode: 0600
        - name: certs-data
          emptyDir: {}
      securityContext:
        runAsUser: 65532
        runAsGroup: 65532
        fsGroup: 65532
